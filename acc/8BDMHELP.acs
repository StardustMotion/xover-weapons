// Include zcommon.acs, 8BDMDEFS.acs and 8BDMMATH.acs

function int getPlnFromTid(int tid)
{
	int pln = tid-PLN_TID;

	if(pln >= 0 && pln < MAX_PLAYERS)
		return pln;
	
	return -1;
}

function int activatorTIDPln(void)
{
	return getPlnFromTid(ActivatorTID());
}

function int checkPlayerCameraPln(int pln)
{
	return getPlnFromTid(CheckPlayerCamera(pln));
}

//[Russ] boss music state update
function void setBossMusicState(int x) { SetCVar("mm8bdm_bossstate", x); }
function int getBossMusicState(void) { return GetCVar("mm8bdm_bossstate"); }
function void setIntenseMusicState(int x) { SetCVar("mm8bdm_intensestate", intToBool(x)); }
function int getIntenseMusicState(void) { return GetCVar("mm8bdm_intensestate"); }

// [Mess] The following function returns:
// 0 if they haven't pressed jump (in a given tic)
// 1 if the player pressed jump
// 2 if the player released jump
// 3 if the player is holding jump
Function int JumpStatus (int Buttons, int OldButtons)
{
	int JumpNow = Buttons & BT_JUMP;
	int JumpOld = OldButtons & BT_JUMP;
	If(JumpNow > JumpOld){Return 1;}
	If(JumpNow < JumpOld){Return 2;}
	If(JumpNow > 0 &&  JumpOld > 0){Return 3;}
	Return 0;
}

// [Mess] Boss Music Selection Function
Function void BossMusicSelect(int ThePar, int Type)
{
		Switch(Type)
		{
			Case 0:
			if(StrLen(GetCvarString("mm8bdm_map_bossmusic")) == 0){
				if(ThePar==1){SetMusic("MM1BOSS");}
				else if(ThePar==2){SetMusic("MM2BOSS");}
				else if(ThePar==3){SetMusic("MM3BOSS");}
				else if(ThePar==4){SetMusic("MM4BOSS");}
				else if(ThePar==5){SetMusic("MM5BOSS");}
				else if(ThePar==6){SetMusic("MM6BOSS");}
				else if(ThePar==7){SetMusic("MM7BOSS");}
				else if(ThePar==8){SetMusic("MM7OBOS");}
				else if(ThePar==9){SetMusic("MM8BOSS");}
				else if(ThePar==10){SetMusic("MM1PBOSS");}
				else if(ThePar==11){SetMusic("DUOMUS");}
				else if(ThePar==12){SetMusic("MMBBOSS");}
				else if(ThePar==13){SetMusic("MMBOBOS");}
				else if(ThePar==14){SetMusic("MMWTBOSS");}
				else if(ThePar==15){SetMusic("MM9BOSS");}
				break;
			}
			else
			{
				SetMusic(GetCvarString("mm8bdm_map_bossmusic"));
				break;
			}
			Case 1:
			if(StrLen(GetCvarString("mm8bdm_map_victorymusic")) == 0){
				if(ThePar==1){SetMusic("MM1VIC");}
				else if(ThePar==2){SetMusic("MM2VIC");}
				else if(ThePar==3){SetMusic("MM3VIC");}
				else if(ThePar==4){SetMusic("MM4VIC");}
				else if(ThePar==5){SetMusic("MM4VIC");}
				else if(ThePar==6){SetMusic("MM4VIC");}
				else if(ThePar==7){SetMusic("MM7VIC");}
				else if(ThePar==8){SetMusic("MM7VIC");}
				else if(ThePar==9){SetMusic("MM4VIC");}
				else if(ThePar==10){SetMusic("MM1VIC");}
				else if(ThePar==11){SetMusic("MM4VIC");}
				else if(ThePar==12){SetMusic("MM4VIC");}
				else if(ThePar==13){SetMusic("MM4VIC");}
				else if(ThePar==14){SetMusic("MMWTVIC");}
				else if(ThePar==15){SetMusic("MM2VIC");}
				break;
			}
			else
			{
				SetMusic(GetCvarString("mm8bdm_map_victorymusic"));
				break;
			}

			Case 2:
			if(StrLen(GetCvarString("mm8bdm_map_intensemusic")) == 0){
				if(ThePar==0){SetMusic("MM6BOSS2");}
				else if(ThePar==1){SetMusic("MM1PWBOS");}
				else if(ThePar==2){SetMusic("GUTSBOSS");}
				else if(ThePar==3){SetMusic("PROMBOSS");}
				else if(ThePar==4){SetMusic("MM4BOSS2");}
				else if(ThePar==5){SetMusic("MM5BOSS2");}
				else if(ThePar==6){SetMusic("MM6BOSS2");}
				else if(ThePar==7){SetMusic("MM7BASS2");}
				else if(ThePar==8){SetMusic("MM7BASS2");}
				else if(ThePar==9){SetMusic("ERBATTLE");}
				else if(ThePar==10){SetMusic("MM1PWBOS");}
				else if(ThePar==11){SetMusic("ERBATTLE");}
				else if(ThePar==12){SetMusic("MMWTFBOS");}
				else if(ThePar==13){SetMusic("MMWTFBOS");}
				else if(ThePar==14){SetMusic("MMWTFBOS");}
				else if(ThePar==15){SetMusic("MM9FBOS");}
				break;
			}
			else
			{
				SetMusic(GetCvarString("mm8bdm_map_intensemusic"));
				break;
			}
		}
}

//[Mess] Used by ridable items (Item2, Ice wall etc)
Function int SpeedCheck (int x1, int x2, int y1, int y2)
{
	int x, y;
	x = x1 - x2 >> 16;
	y = y1 - y2 >> 16;
	return(sqrt8( x*x + y*y ));
}

function int onPlatformZ (int tid1z, int tid2z, int height)
{
	return tid2z==(tid1z+(height<<16));
}

function int onPlatformXY (int tid1x, int tid1y, int tid2x, int tid2y, int radius)
{
	int d = max(abs(tid1x - tid2x), abs(tid1y - tid2y)) >> 16;
	return d < radius;
}

// [Trill] Return number of players / teams some number of frags away from fraglimit
// 		   Less efficient than old code, but more flexible and easier to parse
function int DMFragCheck(int fragsAway, bool teamed, int maxPlayers, int fragLimit) {
	if (fragLimit == 0) { return 0; }

	int count = 0;

	if (teamed) {
		int maxTeams = GetCvar("sv_maxteams");
		for(int i = 0; i < maxTeams; i++) {
			if(GetTeamProperty(i, TPROP_FragCount) >= fragLimit - fragsAway) {
				count++;
			}
		}
	} else {
		for(i = 0; i < maxPlayers; i++) {
			if(!PlayerInGame(i)) continue;

			if(GetPlayerScore(i, SCORE_FRAGS) >= fragLimit - fragsAway) {
				count++;
			}
		}
	}

	return count;
}

// [Trill] Checks to see if there's any team with 1 player left
Function bool LMSBossCheck (int blue, int red, int orange, int purple)
{
	return blue == 1 || red == 1 || orange == 1 || purple == 1;
}

// [Russ] Returns the number of teams who have 1 active player AND who are about to win the map
function int TLMSBossCount(int blue, int red, int green, int gold)
{
	int maxTeams = getCVar("sv_maxteams");
	int maxWins = getCVar("winlimit");

	int count = 0;

	for(int i = 0; i < maxTeams; i++) {
		if(GetTeamProperty(i, TPROP_Score) == maxWins-1 && TeamArray(i, blue, red, green, gold) == 1)
			count++;
	}

	return count;
}

// [Trill] Return all teams that are a number of points away from the point limit
function int CTFScoreCheck(int scoreAway) {
	int maxTeams = getCvar("sv_maxteams");
	int maxPoints = getCvar("pointlimit");

	int count = 0;

	for(int i = 0; i < maxTeams; i++) {
		if(GetTeamProperty(i, TPROP_PointCount) >= maxPoints - scoreAway) {
			count++;
		}
	}

	return count;
}

function int TeamArray(int i, int blue, int red, int green, int gold)
{
	if(i == 0)
		return blue;
	if(i == 1)
		return red;
	if(i == 2)
		return green;
	if(i == 3)
		return gold;
	return 0;
}
